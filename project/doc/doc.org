#+TITLE: Project
#+AUTHOR: Michael Hunsinger
#+OPTIONS: \n:nil ':t f:nil
#+LaTeX_CLASS_OPTIONS: [a4paper]
#+LATEX_CLASS:  article
#+LaTeX_HEADER: \setlength\parindent{0pt}

* Setup
  The project was done using Node.js and requires Node.js along with npm to be
  installed (usually comes with Node.js). Node.js can be downloaded from the
  [[https://nodejs.org][Node.Js]] website. It can also be install through a package manager if running
  Linux.

** Build
   Once Node.js is installed, navigate to the directory containing the
   project. The node modules were not bundled and will have to be installed via
   the following command

   #+BEGIN_SRC sh
     npm install
   #+END_SRC

** Run
   After the modules are installed, you may select from the following run
   commands to execute.

*** Maps
    Run the program to generate a move and reachability board for an array of pieces.

    #+BEGIN_SRC sh
      npm run maps res/input/2d-chess-pieces.json
    #+END_SRC

*** Trajectories
    Run the program to generate trajectories for a given piece.

    #+BEGIN_SRC sh
      npm run trajectories res/input/2d-chess-king.json
    #+END_SRC

* Input
  This section outlines the various files the program can consume.

** Board and Pieces
   /See/ =res/input/2d-chess-pieces.json= /for sample input for all chess
   pieces./ \\
   
   Board and Pieces are the most basic type of input the program consumes. The
   file contains information for one board (which stays constant for all
   pieces) and any number of pieces. 

   Board and Pieces input files should be provided when executing the
   following:
   - Maps
   - Trajectories

** Grammar
   /See/ =res/input/grammar.json= /for sample input for a grammar./ \\

   Grammar files define a controlled grammar for the program to use.

   Grammar input files should be provided when executing the following:
   - Trajectories
   
* Output
  This section outline the various output the program will produce.

** Maps
   An output file will be created in =res/output= with the same name as your
   input file with =output= appended to it. The file is an array of objects,
   each entry corresponds to a piece in the pieces array in the input
   file. Below is a small example of an output.

   #+BEGIN_SRC json
     [
         {
             "piece": "King",
             "moveBoard": [
                 "3 3 3 3 4 5 6 7",
                 "2 2 2 3 4 5 6 7",
                 "1 1 2 3 4 5 6 7",
                 "0 1 2 3 4 5 6 7",
                 "1 1 2 3 4 5 6 7",
                 "2 2 2 3 4 5 6 7",
                 "3 3 3 3 4 5 6 7",
                 "4 4 4 4 4 5 6 7"
             ],
             "reachBoard": [
                 "7 7 7 7 7 7 7 7 7 7 7 7 7 7 7",
                 "7 6 6 6 6 6 6 6 6 6 6 6 6 6 7",
                 "7 6 5 5 5 5 5 5 5 5 5 5 5 6 7",
                 "7 6 5 4 4 4 4 4 4 4 4 4 5 6 7",
                 "7 6 5 4 3 3 3 3 3 3 3 4 5 6 7",
                 "7 6 5 4 3 2 2 2 2 2 3 4 5 6 7",
                 "7 6 5 4 3 2 1 1 1 2 3 4 5 6 7",
                 "7 6 5 4 3 2 1 0 1 2 3 4 5 6 7",
                 "7 6 5 4 3 2 1 1 1 2 3 4 5 6 7",
                 "7 6 5 4 3 2 2 2 2 2 3 4 5 6 7",
                 "7 6 5 4 3 3 3 3 3 3 3 4 5 6 7",
                 "7 6 5 4 4 4 4 4 4 4 4 4 5 6 7",
                 "7 6 5 5 5 5 5 5 5 5 5 5 5 6 7",
                 "7 6 6 6 6 6 6 6 6 6 6 6 6 6 7",
                 "7 7 7 7 7 7 7 7 7 7 7 7 7 7 7"
             ]
         }
     ]
   #+END_SRC

   This output is the expected format for the =moveMaps.json= for when
   determining trajectories.

** Trajectories 
   Currently, there is no output for this.
