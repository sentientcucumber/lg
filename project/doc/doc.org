#+TITLE: Project One
#+AUTHOR: Michael Hunsinger
#+OPTIONS: \n:nil ':t f:nil num:nil
#+LaTeX_CLASS_OPTIONS: [a4paper]
#+LATEX_CLASS:  article
#+LaTeX_HEADER: \setlength\parindent{0pt}
#+LaTeX_HEADER: \usepackage{titling}
#+LaTeX_HEADER: \addtolength{\topmargin}{-1.375in}
#+LaTeX_HEADER: \addtolength{\textheight}{1.75in}
#+LaTeX_HEADER: \addtolength{\oddsidemargin}{-.375in}
#+LaTeX_HEADER: \addtolength{\evensidemargin}{-.875in}
#+LaTeX_HEADER: \addtolength{\textwidth}{0.75in}

* Project
  The first project for Linguistic Geometry, Spring semester of 2015.

** Installation
   The project was done using Node.js and requires Node.js along with npm to be
   installed (usually comes with Node.js). Node.js can be downloaded from the
   [[https://nodejs.org][Node.Js]] website. It can also be install through a package manager if running
   Linux.

** Build
   Once Node.js is installed, navigate to the directory containing the
   project. The node modules were not bundled and will have to be installed via
   the following command

   #+BEGIN_SRC sh
        npm install
   #+END_SRC

** Run
   After the modules are installed, run the following command to run the
   project.

   #+BEGIN_SRC sh
        npm run project res/chess.json
   #+END_SRC

** Input
   The ~chess.json~ file provided contains all chess pieces. Below is a small
   snippet of the file.

   #+BEGIN_SRC json
     {
         "board": {
             "xMax": 8,
             "yMax": 8,
             "zMax": null,
             "obstacles": [ ]
         },
         "pieces": [
             {
                 "piece": "King",
                 "xCoordinate": 2,
                 "yCoordinate": 7,
                 "reachability": [
                     {
                         "condition-1": "| y1 - x1 | <= 1"
                     },
                     {
                         "condition-1": "| y2 - x2 | <= 1"
                     }
                 ]
             }
         ]
     }
   #+END_SRC

   As you can see, it contains information about the board and any number of
   pieces.

*** Board
    Below are some notes regarding the fields for the board.

    - The board is 1-based and assumes the min is '1' and thus not required.
    - Obstacles are an array of points that cannot be reached by any
      piece. Below is a sample of an obstacle object that would cause the point
      (3,2) to be unreachable..

      #+BEGIN_SRC js
        {
            "x": 3,
            "y": 2
        }
      #+END_SRC
    - The board information stays constant when reading each piece.

*** Pieces
    Below are some notes regarding the fields for pieces.

    - ~x~ and ~y~ are the starting coordinates for the given piece.
    - Reachability is an array of conditions that are used to determine if a
      given cell is reachable. For each reachability, all conditions must be met
      in order for it to be reachable. However, not all reachabilities must be
      hold true for the cell to be reachable.

** Output
   Below is sample output for a King.

   #+BEGIN_EXAMPLE
   7 7 7 7 7 7 7 7 7 7 7 7 7 7 7
   7 6 6 6 6 6 6 6 6 6 6 6 6 6 7
   7 6 5 5 5 5 5 5 5 5 5 5 5 6 7
   7 6 5 4 4 4 4 4 4 4 4 4 5 6 7
   7 6 5 4 3 3 3 3 3 3 3 4 5 6 7
   7 6 5 4 3 2 2 2 2 2 3 4 5 6 7
   7 6 5 4 3 2 1 1 1 2 3 4 5 6 7
   7 6 5 4 3 2 1 0 1 2 3 4 5 6 7
   7 6 5 4 3 2 1 1 1 2 3 4 5 6 7
   7 6 5 4 3 2 2 2 2 2 3 4 5 6 7
   7 6 5 4 3 3 3 3 3 3 3 4 5 6 7
   7 6 5 4 4 4 4 4 4 4 4 4 5 6 7
   7 6 5 5 5 5 5 5 5 5 5 5 5 6 7
   7 6 6 6 6 6 6 6 6 6 6 6 6 6 7
   7 7 7 7 7 7 7 7 7 7 7 7 7 7 7
   #+END_EXAMPLE
